<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data.table on Code R</title>
    <link>https://eliocamp.github.io/codigo-r/en/tags/data.table/</link>
    <description>Recent content in Data.table on Code R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Sat, 06 Jul 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://eliocamp.github.io/codigo-r/en/tags/data.table/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why I love data.table</title>
      <link>https://eliocamp.github.io/codigo-r/en/2019/07/why-i-love-data-table/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://eliocamp.github.io/codigo-r/en/2019/07/why-i-love-data-table/</guid>
      <description>


&lt;p&gt;I‚Äôve been an R user for a few years now and the &lt;a href=&#34;https://github.com/Rdatatable/data.table/wiki&#34;&gt;data.table&lt;/a&gt; package has been my staple package for most of it. In this post I wanted to talk about why almost every script and RMarkdown report I write start with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;my-memory-issues&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;My memory issues&lt;/h1&gt;
&lt;p&gt;I started working on my &lt;a href=&#34;https://en.wikipedia.org/wiki/Licentiate_(degree)&#34;&gt;licenciate&lt;/a&gt; thesis (the argentinian equivalent to a Masters Degree) around mid 2016. I had been using R for school work and fun for some time and knew that I wanted to perform all my analysis in R and write my thesis in RMarkdown. In the end, &lt;a href=&#34;https://github.com/eliocamp/tesis/&#34;&gt;I did&lt;/a&gt; but in the process I had to learn new tools and also create my own (which materialised in the &lt;a href=&#34;https://eliocamp.github.io/metR/&#34;&gt;metR package&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The big problem I encountered early on was how to store and manipulate data. My main source of data were the output of atmospheric models which are stored usually in regularly spaced grids. The most natural way to store that kind of data would be in a multidimensional array like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;file &amp;lt;- &amp;quot;~/DATOS/NCEP Reanalysis/air.mon.mean.nc&amp;quot;
subset &amp;lt;- list(level = 1000:800, 
               time = c(&amp;quot;1979-01-01&amp;quot;, &amp;quot;2018-12-01&amp;quot;))
temperature &amp;lt;- metR::ReadNetCDF(file, 
                                subset = subset,
                                out = &amp;quot;array&amp;quot;)[[1]]
str(temperature)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  num [1:144, 1:73, 1:3, 1:473] -30.5 -30.5 -30.5 -30.5 -30.5 ...
##  - attr(*, &amp;quot;dimnames&amp;quot;)=List of 4
##   ..$ lon  : chr [1:144] &amp;quot;0&amp;quot; &amp;quot;2.5&amp;quot; &amp;quot;5&amp;quot; &amp;quot;7.5&amp;quot; ...
##   ..$ lat  : chr [1:73] &amp;quot;90&amp;quot; &amp;quot;87.5&amp;quot; &amp;quot;85&amp;quot; &amp;quot;82.5&amp;quot; ...
##   ..$ level: chr [1:3] &amp;quot;1000&amp;quot; &amp;quot;925&amp;quot; &amp;quot;850&amp;quot;
##   ..$ time : chr [1:473] &amp;quot;1979-01-01&amp;quot; &amp;quot;1979-02-01&amp;quot; &amp;quot;1979-03-01&amp;quot; &amp;quot;1979-04-01&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is very memory-efficient, but it doesn‚Äôt play well with a tidydata framework. Subsetting, filtering and operating on groups using arrays is rather awkward ‚Äìnot to mention that dimensions can only be characters! Furthermore, I had to transform it to a dataframe each time I wanted to plot it with ggplot2. What I needed was something more like this&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temperature &amp;lt;- metR::ReadNetCDF(file, subset = subset)
str(temperature)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;data.table&amp;#39; and &amp;#39;data.frame&amp;#39;:   14916528 obs. of  5 variables:
##  $ level: num  1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 ...
##  $ lat  : num  90 90 90 90 90 90 90 90 90 90 ...
##  $ lon  : num  0 2.5 5 7.5 10 12.5 15 17.5 20 22.5 ...
##  $ air  : num  -30.5 -30.5 -30.5 -30.5 -30.5 ...
##  $ time : POSIXct, format: &amp;quot;1979-01-01&amp;quot; &amp;quot;1979-01-01&amp;quot; ...
##  - attr(*, &amp;quot;.internal.selfref&amp;quot;)=&amp;lt;externalptr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is that this representation is much less memory-efficient and my aging laptop couldn‚Äôt handle it. While it would eventually read it, even the simplest operation would crash my R session. This was due to the fact that R loooves to &lt;a href=&#34;http://adv-r.had.co.nz/memory.html#modification&#34;&gt;copy on modify&lt;/a&gt; and this is deadly if you‚Äôre dealing with data that fits on your memory but just barely.&lt;/p&gt;
&lt;p&gt;Enter data.table and its &lt;a href=&#34;https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reference-semantics.html&#34;&gt;modify by reference&lt;/a&gt; functionality. Unlike regular data.frames or tibbles, data.table objects can be easily modified without copying the entire object! And this means that you can safely work with objects that take more than half your available RAM.&lt;/p&gt;
&lt;p&gt;For this reason I often say that without data.table I wouldn‚Äôt have gotten my degree!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;come-for-the-performance-stay-for-the-syntax&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Come for the performance, stay for the syntax&lt;/h1&gt;
&lt;p&gt;But while my introduction to data.table was inspired by the need for memory optimisation, I quickly learned to love it‚Äôs minimalistic syntax.&lt;/p&gt;
&lt;p&gt;The basic form of data.table syntax is a very elegant extension of the classic data.frame. This is great because if you already use data.frames, then there‚Äôs no need to learn about a whole nother family of functions to do what you already did. In fact, data.tables are mostly just smarter data.frames. For example, if I wanted to filter only the northern hemisphere on my temperature dataset, with a regular data.frame I would have to use&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temperature_df &amp;lt;- as.data.frame(temperature)
head(temperature_df[temperature_df$lat &amp;gt;= 0, ])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   level lat  lon       air       time
## 1  1000  90  0.0 -30.49999 1979-01-01
## 2  1000  90  2.5 -30.49999 1979-01-01
## 3  1000  90  5.0 -30.49999 1979-01-01
## 4  1000  90  7.5 -30.49999 1979-01-01
## 5  1000  90 10.0 -30.49999 1979-01-01
## 6  1000  90 12.5 -30.49999 1979-01-01&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But who‚Äôs got the time to write all that? I can barely stay awake after typing &lt;code&gt;temperature_df&lt;/code&gt; so many times üò¥! data.table is smart enough to realise that when I write ‚Äúlat‚Äù inside my data, I‚Äôm talking about the column whose name is ‚Äúlat‚Äù ‚Äìwhat else could I mean? It‚Äôs also smart enough that if I omit that last comma, it knows that I want every column (good riddance, ‚Äúundefined columns selected‚Äù!). So it all reduces to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(temperature[lat &amp;gt;= 0])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    level lat  lon       air       time
## 1:  1000  90  0.0 -30.49999 1979-01-01
## 2:  1000  90  2.5 -30.49999 1979-01-01
## 3:  1000  90  5.0 -30.49999 1979-01-01
## 4:  1000  90  7.5 -30.49999 1979-01-01
## 5:  1000  90 10.0 -30.49999 1979-01-01
## 6:  1000  90 12.5 -30.49999 1979-01-01&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isn‚Äôt that gorgeous? But there‚Äôs even more. The second argument inside the brackets allows one to select columns, so if I wanted to get the mean temperature, I could write this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(temperature_df[, &amp;quot;air&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.916081&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But with all those quotes I fear for the integrity of my ‚Äúshift‚Äù and ‚Äútwo‚Äù keys. Also, what if I wanted to apply complex operation on multiple columns? I would be repeating &lt;code&gt;temperature_df&lt;/code&gt; like a broken record while drowning in a sea of quotation marks! Again, since data.table is smart enough to know that when I‚Äôm inside a data.table I‚Äôm usually operating on its columns, I can just write this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temperature[, mean(air)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.916081&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exquisite! The beautiful thing is that this works with &lt;strong&gt;any expresion&lt;/strong&gt;QQ, which means that, again, I can apply all my previous base R knowledge without having to learn a whole new set of functions or operations.&lt;/p&gt;
&lt;p&gt;The last wonderful basic building block of data.table syntax is the &lt;code&gt;by&lt;/code&gt; argument. I often need to split the data in groups, apply some function and the join it all together. Using a normal data.frame this could be done artisanally with a for loop, or the more industrialised &lt;code&gt;by()&lt;/code&gt; function or &lt;code&gt;tapply()&lt;/code&gt; (maybe, I‚Äôve never really understood how it works). But not only would I hurt my hand due to repetitive typing, but I would also fall prey to memory issues. With data.table, applying any function to each group of the data is a breeze:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(temperature[, mean(air), by = .(lat, level)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     lat level        V1
## 1: 90.0  1000 -15.11903
## 2: 87.5  1000 -15.18808
## 3: 85.0  1000 -15.07319
## 4: 82.5  1000 -14.25968
## 5: 80.0  1000 -12.75084
## 6: 77.5  1000 -11.06509&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With just a slight change I can create a new column:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temperature[, mean_air := mean(air), by = .(lat, level)]
head(temperature)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    level lat  lon       air       time  mean_air
## 1:  1000  90  0.0 -30.49999 1979-01-01 -15.11903
## 2:  1000  90  2.5 -30.49999 1979-01-01 -15.11903
## 3:  1000  90  5.0 -30.49999 1979-01-01 -15.11903
## 4:  1000  90  7.5 -30.49999 1979-01-01 -15.11903
## 5:  1000  90 10.0 -30.49999 1979-01-01 -15.11903
## 6:  1000  90 12.5 -30.49999 1979-01-01 -15.11903&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here lays maybe the biggest departure from the classic data.frame. The &lt;code&gt;:=&lt;/code&gt; operator adds columns by reference, which means that there‚Äôs no need to assign the result to a new variable! That is, there‚Äôs no need to use &lt;code&gt;temperature &amp;lt;- temperature[, mean_air := mean(air), by = .(lat, level)]&lt;/code&gt;. If you remember all the stuff above about memory efficiency then you understand why it‚Äôs a very useful feature for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;this-is-not-a-pipe&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;This is not a pipe&lt;/h1&gt;
&lt;p&gt;data.table has its own idiomatic way of chaining operation but I prefer to use pipes (&lt;code&gt;%&amp;gt;%&lt;/code&gt;). The trick is to realised that when using a pipe, the dot (&lt;code&gt;.&lt;/code&gt;) is a stand-in for the previous result. In practice this means that data.table operations can be chained thus:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)
library(ggplot2)
temperature %&amp;gt;% 
   .[level == 1000] %&amp;gt;% 
   .[, mean(air), by = .(lat, lon)] %&amp;gt;% 
   .[lat &amp;gt; 0] %&amp;gt;% 
   ggplot(aes(lon, lat)) +
   geom_raster(aes(fill = V1), interpolate = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../../post/2019-07-06-why-i-love-data-table.en_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;and-more&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;‚Ä¶and more!&lt;/h1&gt;
&lt;p&gt;Of course this only scratches the surface of all the goodness of the data.table package. Inside the hood there are lots of optimisations to give it extra speed. It‚Äôs got special symbols that allow for more complex operations and optimised logical operators such as &lt;code&gt;%like%&lt;/code&gt; and &lt;code&gt;%between%&lt;/code&gt;. The &lt;code&gt;fread()&lt;/code&gt; and &lt;code&gt;fwrite()&lt;/code&gt; functions not only are insanely fast but also are packed with functionality. And so on‚Ä¶&lt;/p&gt;
&lt;p&gt;So why I love data.table? I love that allows me to work with big and small datasets with the same elegant syntax and with great performance without even thinking about it. It is a wonderful package and you should give it a try!&lt;/p&gt;
&lt;div id=&#34;now-i-love-data.table-too&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;‚ÄúNow I love data.table too!‚Äù&lt;/h3&gt;
&lt;p&gt;If my love for data.table rubbed on you even a little bit, then a good summary of the basic functionality is the &lt;a href=&#34;https://github.com/Rdatatable/data.table/wiki/Getting-started&#34;&gt;Getting Started&lt;/a&gt; set of articles. If you already know a the basics and want to take your skills to the next level, the &lt;a href=&#34;http://brooksandrew.github.io/simpleblog/articles/advanced-data-table/&#34;&gt;Advanced tips and tricks with data.table&lt;/a&gt;, is chock full of advanced tricks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>