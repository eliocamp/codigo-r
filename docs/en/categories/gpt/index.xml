<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GPT on Code R</title>
    <link>/en/categories/gpt/</link>
    <description>Recent content in GPT on Code R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Sun, 11 Dec 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/en/categories/gpt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MIDI madness with ChatGPT: the AI-powered tunes that will make you laugh, cry, and dance</title>
      <link>/en/2022/12/chatpgt-midi-music/</link>
      <pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/en/2022/12/chatpgt-midi-music/</guid>
      <description>


&lt;p&gt;&lt;a href=&#34;chat.openai.com/&#34;&gt;ChatGPT&lt;/a&gt; seems to be taking the world by storm.
This is version of the GPT3 language model which is somehow optimised for chat dominates my Mastodon feed and inspired countless articles and discussion. &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A decent chunk of the discourse has been about how the outputs of the models sound very plausible and even authoritative but lack any connection with reality because the model is train to mimic language, not to give truth.
Another chunk of the discourse is dominated by funny responses and creations.
Things like poems, stories, limericks.&lt;/p&gt;
&lt;p&gt;This convinced me that that we should treat GPT like we treat image generation models: tools to create art, which is, in principle, unconcerned with truth.
I’ve been playing with Stable Diffusion (you can check &lt;a href=&#34;https://eliocamp.github.io/art/&#34;&gt;my gallery&lt;/a&gt; so I was interested to know if I could use GPT to create other things beside text.&lt;/p&gt;
&lt;p&gt;Sure, GPT’s will only respond with text, but since anything can be potentially encoded in (enough) text, it could potentially create anything.&lt;/p&gt;
&lt;div id=&#34;gpt-cant-create-images&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;GPT can’t create images&lt;/h2&gt;
&lt;p&gt;My first thought was to try to create images using &lt;a href=&#34;https://en.wikipedia.org/wiki/Base64&#34;&gt;Base64 encoding&lt;/a&gt;.
Since images can be base64 encoded, then I could potentially ask GPT something like “Give me the base64 representation of a house at the foot of a mountain”.&lt;/p&gt;
&lt;p&gt;First I checked if GPT could understand base64 encoding at all.
It turns out, &lt;a href=&#34;https://mastodon.social/@eliocamp/109475795739588085&#34;&gt;it can&lt;/a&gt;!
However, in my tests it seems that GPT’s ability to decode from and encode to base64 was limited to short sentences and didn’t extend to images.&lt;/p&gt;
&lt;p&gt;I gave it the base64 representation of a 50px by 50px image of a black square and asked it to describe the image.
Even though GPT recognised the encoded image as a PNG file, it didn’t describe it properly, it just gave bullshit answers.
Furthermore, when asked to generate a base64-encoded image the resulting text wasn’t even valid and I think it was larger that the limit of tokens for each response.&lt;/p&gt;
&lt;p&gt;So images are a bust.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;gpt-can-create-music&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;GPT can create music&lt;/h2&gt;
&lt;p&gt;Having failed with images, I turned my attention to music.
There are several ways to represent music with text.
At first I tried with &lt;a href=&#34;https://en.wikipedia.org/wiki/ABC_notation&#34;&gt;ABC Notation&lt;/a&gt;, but asking it to create the ABC notation of the Happy Birthday tune resulted in invalid notation and I wasn’t able to nudge it to correct it.
I don’t know enough of ABC notation, though, so that could be also my fault.&lt;/p&gt;
&lt;p&gt;Then, I remembered that MIDI files can be encoded as text, so I asked it to create a MIDI text for the tune.
Unfortunately it didn’t work very well.
I could get valid MIDI notation, but it was just gibberish.&lt;/p&gt;
&lt;p&gt;But then I remembered a trick I’d seen posted on twitter: GPT can be bad at giving answers, but it can be good at creating code that returns the answer.
So I tried combinations of “Write a program in R/python/bash that crates a simple tune.”
(I couldn’t get it to play Happy Birthday.)
Eventually I settled for python and got my first song!&lt;/p&gt;
&lt;p&gt;Below is the full annotated conversation. Note that at some points I had to edit previous sections of the conversation, so what you’re seeing is just the end result.&lt;/p&gt;
&lt;div id=&#34;making-gpt-sing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Making GPT sing&lt;/h3&gt;
&lt;div id=&#34;creating-a-python-program-to-write-midi-files&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Creating a python program to write midi files&lt;/h4&gt;
&lt;p&gt;After a few tries I decided to use python.
In some examples, GPT wrote code that added each note manually, so I had to ask it explicitly to use a for loop.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;I want to write a midi file.
Can you provide python3 code that writes a simple tune using a for loop to add each note?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Here is a simple example using the python-midi library:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# create the MIDIFile object with 1 track
midi = MIDIFile(1)

# add the track name and tempo
midi.addTrackName(0, 0, &amp;quot;My Simple Tune&amp;quot;)
midi.addTempo(0, 0, 120)

# create a list of notes to add to the track
notes = [60, 62, 64, 65, 67, 69, 71]

# use a for loop to add each note to the track
for i, note in enumerate(notes):
   # add the note on event
   midi.addNote(0, 0, note, i, 1, 100)
   # add the note off event
   midi.addNote(0, 0, note, i+1, 1, 0)

# write the MIDIFile to a file
with open(&amp;quot;simple_tune.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code will create a simple tune with a single track and 7 notes, with each note lasting for 1 beat at 120 beats per minute.
The resulting MIDI file can be played back using a MIDI player or imported into a DAW for further editing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here’s out first tune!&lt;/p&gt;
&lt;div class=&#39;audio-container&#39;&gt;

&lt;audio controls&gt;
&lt;source src=&#34;../../../post/gptsong/tune1.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
&lt;p&gt;Your browser does not support the audio element.&lt;/p&gt;
&lt;/audio&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s start improving to the script by adding more options.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Great! Can you modify the program so each note has a potentially different length?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, we can use the &lt;code&gt;duration&lt;/code&gt; parameter in the &lt;code&gt;addNote&lt;/code&gt; method to specify the length of each note. Here is an updated version of the code that allows for different note lengths:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# create the MIDIFile object with 1 track
midi = MIDIFile(1)

# add the track name and tempo
midi.addTrackName(0, 0, &amp;quot;My Simple Tune&amp;quot;)
midi.addTempo(0, 0, 120)

# create a list of notes and durations to add to the track
notes = [60, 62, 64, 65, 67, 69, 71]
durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]

# use a for loop to add each note to the track
for i, (note, duration) in enumerate(zip(notes, durations)):
   # add the note on event
   midi.addNote(0, 0, note, i, duration, 100)
   # add the note off event
   midi.addNote(0, 0, note, i+duration, duration, 0)

# write the MIDIFile to a file
with open(&amp;quot;simple_tune.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we have added a &lt;code&gt;durations&lt;/code&gt; list which specifies the length of each note in beats. We then use this list in the for loop to set the duration of each note. Note that we also need to update the time of the note off event to account for the different note lengths.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Fantastic. One thing, though is that I don’t think the program needs note on and note off events, because the addNote method already defines the duration of each note, let’s remove that and only have one addNote in the for loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;You are correct - the &lt;code&gt;addNote&lt;/code&gt; method already includes the duration of each note, so we don’t need to add separate note on and note off events. Here is an updated version of the code that only uses the &lt;code&gt;addNote&lt;/code&gt; method once per note:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# create the MIDIFile object with 1 track
midi = MIDIFile(1)

# add the track name and tempo
midi.addTrackName(0, 0, &amp;quot;My Simple Tune&amp;quot;)
midi.addTempo(0, 0, 120)

# create a list of notes and durations to add to the track
notes = [60, 62, 64, 65, 67, 69, 71]
durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]

# use a for loop to add each note to the track
for i, (note, duration) in enumerate(zip(notes, durations)):
   # add the note with the specified duration
   midi.addNote(0, 0, note, i, duration, 100)

# write the MIDIFile to a file
with open(&amp;quot;simple_tune.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we only use the &lt;code&gt;addNote&lt;/code&gt; method once per note, and the duration of each note is specified in the &lt;code&gt;duration&lt;/code&gt; parameter. This allows us to create a simple tune with varying note lengths.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that I had to do a little thinking about the script and also looking at &lt;a href=&#34;https://midiutil.readthedocs.io/en/1.2.1/common.html#adding-notes&#34;&gt;midiutil’s documentation&lt;/a&gt; to find that subtle issue with the program.&lt;/p&gt;
&lt;p&gt;The next bit fixes an issue that I only noticed after trying to create some more stuff with the script.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Great. However, now that notes can have different duration, the timing of each note is not constant. Let’s compute the timing based on the duration of each note.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;To compute the timing of each note based on its duration, we can keep track of the total time elapsed and use that as the starting time of each note. Here is an updated version of the code that does this:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# create the MIDIFile object with 1 track
midi = MIDIFile(1)

# add the track name and tempo
midi.addTrackName(0, 0, &amp;quot;My Simple Tune&amp;quot;)
midi.addTempo(0, 0, 120)

# create a list of notes and durations to add to the track
notes = [60, 62, 64, 65, 67, 69, 71]
durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]

# initialize a variable to keep track of the total time elapsed
total_time = 0

# use a for loop to add each note to the track
for i, (note, duration) in enumerate(zip(notes, durations)):
   # add the note with the specified duration starting at the current total time
   midi.addNote(0, 0, note, total_time, duration, 100)
   # increment the total time by the duration of the current note
   total_time += duration

# write the MIDIFile to a file
with open(&amp;quot;simple_tune.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we initialize a &lt;code&gt;total_time&lt;/code&gt; variable to keep track of the time elapsed so far. Then, in the for loop, we use the &lt;code&gt;total_time&lt;/code&gt; variable as the starting time of each note, and increment it by the duration of the current note. This ensures that each note is spaced out according to its duration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Fantastic. Let’s now add the option of having a different volume for each note.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;To add the option of having a different volume for each note, we can add a &lt;code&gt;volumes&lt;/code&gt; list that specifies the volume of each note, and use that in the &lt;code&gt;addNote&lt;/code&gt; method. Here is an updated version of the code that does this:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# create the MIDIFile object with 1 track
midi = MIDIFile(1)

# add the track name and tempo
midi.addTrackName(0, 0, &amp;quot;My Simple Tune&amp;quot;)
midi.addTempo(0, 0, 120)

# create a list of notes, durations, and volumes to add to the track
notes = [60, 62, 64, 65, 67, 69, 71]
durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]
volumes = [100, 80, 60, 50, 40, 30, 20]

# initialize a variable to keep track of the total time elapsed
total_time = 0

# use a for loop to add each note to the track
for i, (note, duration, volume) in enumerate(zip(notes, durations, volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(0, 0, note, total_time, duration, volume)
   # increment the total time by the duration of the current note
   total_time += duration

# write the MIDIFile to a file
with open(&amp;quot;simple_tune.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we have added a &lt;code&gt;volumes&lt;/code&gt; list that specifies the volume of each note, and we use this in the &lt;code&gt;addNote&lt;/code&gt; method as the &lt;code&gt;volume&lt;/code&gt; parameter. This allows us to have different volumes for each note in the tune.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Great. Now, what’s the maximum volume?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;In MIDI files, the maximum volume is represented by the value 127. This is the maximum value that can be used in the &lt;code&gt;volume&lt;/code&gt; parameter of the &lt;code&gt;addNote&lt;/code&gt; method. In the code above, we have used the values 100, 80, 60, 50, 40, 30, and 20 for the volumes of each note, which are all less than the maximum value of 127. If you want to use the maximum volume for any of the notes, you can simply use the value 127 in the &lt;code&gt;volumes&lt;/code&gt; list. For example:&lt;/p&gt;
&lt;pre class=&#34;css&#34;&gt;&lt;code&gt;volumes = [100, 80, 60, 127, 40, 30, 20]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would set the volume of the 4th note to the maximum value of 127.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So now I had a script that could create a tune with many interesting note variations.
Here’s the tune so far:&lt;/p&gt;
&lt;div class=&#39;audio-container&#39;&gt;

&lt;audio controls&gt;
&lt;source src=&#34;../../../post/gptsong/tune2.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
&lt;p&gt;Your browser does not support the audio element.&lt;/p&gt;
&lt;/audio&gt;
&lt;/div&gt;
&lt;p&gt;So now I wanted to go a bit further.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Perfect. Now, I will be using the program to create midi files of piano songs, which have a right hand part playing the melody and a left hand part that plays the base. Let’s modify the program to play each hand in it’s own track.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;To create a MIDI file with multiple tracks, we can simply create a &lt;code&gt;MIDIFile&lt;/code&gt; object with multiple tracks and use the &lt;code&gt;addNote&lt;/code&gt; method for each track. Here is an updated version of the code that creates a MIDI file with two tracks for a piano song:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# create the MIDIFile object with 2 tracks
midi = MIDIFile(2)

# add the track names and tempo
midi.addTrackName(0, 0, &amp;quot;Right Hand&amp;quot;)
midi.addTrackName(1, 0, &amp;quot;Left Hand&amp;quot;)
midi.addTempo(0, 0, 120)

# create a list of notes, durations, and volumes for the right hand part
right_notes = [60, 62, 64, 65, 67, 69, 71]
right_durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]
right_volumes = [100, 80, 60, 50, 40, 30, 20]

# create a list of notes, durations, and volumes for the left hand part
left_notes = [48, 50, 52, 53, 55, 57, 59]
left_durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]
left_volumes = [100, 80, 60, 50, 40, 30, 20]

# initialize a variable to keep track of the total time elapsed
total_time = 0

# use a for loop to add each note to the right hand track
for i, (note, duration, volume) in enumerate(zip(right_notes, right_durations, right_volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(0, 0, note, total_time, duration, volume)
   # increment the total time by the duration of the current note
   total_time += duration

# reset the total time to 0 for the left hand track
total_time = 0

# use a for loop to add each note to the left hand track
for i, (note, duration, volume) in enumerate(zip(left_notes, left_durations, left_volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(1, 0, note, total_time, duration, volume)
   # increment the total time by the duration of the current note
   total_time += duration

# write the MIDIFile to a file
with open(&amp;quot;piano_song.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we create a &lt;code&gt;MIDIFile&lt;/code&gt; object with 2 tracks and add track names for each track. We then create separate lists of notes, durations, and volumes for each track, and use a for loop to add each note to the appropriate track. This allows us to create a MIDI file with multiple tracks for a piano song with a right hand and left hand part.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Not the most elegant script ever crated, but it works!
I was quite surprised by the fact that GPT actually used notes with lower pitch for the left hand part!
Also notice that the name of the output file is now “piano_song.mid”.&lt;/p&gt;
&lt;p&gt;This was going so well that I decided to try go further.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Great. Now, can you add an option to change the instrument. Let’s test it with a flute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;To change the instrument of a track in a MIDI file, we can use the &lt;code&gt;addProgramChange&lt;/code&gt; method to specify the instrument for each track. Here is an updated version of the code that adds this option:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# create the MIDIFile object with 2 tracks
midi = MIDIFile(2)

# add the track names and tempo
midi.addTrackName(0, 0, &amp;quot;Right Hand&amp;quot;)
midi.addTrackName(1, 0, &amp;quot;Left Hand&amp;quot;)
midi.addTempo(0, 0, 120)

# set the instrument for each track
midi.addProgramChange(0, 0, 0, 74)  # flute for right hand track
midi.addProgramChange(1, 0, 0, 74)  # flute for left hand track

# create a list of notes, durations, and volumes for the right hand part
right_notes = [60, 62, 64, 65, 67, 69, 71]
right_durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]
right_volumes = [100, 80, 60, 50, 40, 30, 20]

# create a list of notes, durations, and volumes for the left hand part
left_notes = [48, 50, 52, 53, 55, 57, 59]
left_durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]
left_volumes = [100, 80, 60, 50, 40, 30, 20]

# initialize a variable to keep track of the total time elapsed
total_time = 0

# use a for loop to add each note to the right hand track
for i, (note, duration, volume) in enumerate(zip(right_notes, right_durations, right_volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(0, 0, note, total_time, duration, volume)
   # increment the total time by the duration of the current note
   total_time += duration

# reset the total time to 0 for the left hand track
total_time = 0

# use a for loop to add each note to the left hand track
for i, (note, duration, volume) in enumerate(zip(left_notes, left_durations, left_volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(1, 0, note, total_time, duration, volume)
   # increment the total time by the duration of the current note
   total_time += duration

# write the MIDIFile to a file
with open(&amp;quot;piano_song.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we have added two &lt;code&gt;addProgramChange&lt;/code&gt; calls to set the instrument for each track. We have used the value 74 for the instrument, which corresponds to the flute. You can use a different instrument by specifying a different value in the &lt;code&gt;addProgramChange&lt;/code&gt; method. A list of available instruments and their corresponding values can be found here: &lt;a href=&#34;https://www.midi.org/specifications/item/gm-level&#34;&gt;https://www.midi.org/specifications/item/gm-level&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That was incredible!
GPT actually correctly decoded the number corresponding to the Flute.
The link it gave wasn’t very helpful, so had to google the list of midi instruments.&lt;/p&gt;
&lt;p&gt;Now I wanted my program to decode that list so I could just use the name of the instrument instead of the number.
My idea was to have a csv with the data and load it in python.
As you will see, GPT had other idea.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Great. Can you give me a csv string with columns “instrument” and “value” with the name and value of instruments 0 to 23? The names of the instruments should be quoted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is a CSV string with the names and values of instruments 0 to 23:&lt;/p&gt;
&lt;pre class=&#34;csv&#34;&gt;&lt;code&gt;&amp;quot;instrument&amp;quot;,&amp;quot;value&amp;quot;
&amp;quot;Acoustic Grand Piano&amp;quot;,&amp;quot;0&amp;quot;
&amp;quot;Bright Acoustic Piano&amp;quot;,&amp;quot;1&amp;quot;
&amp;quot;Electric Grand Piano&amp;quot;,&amp;quot;2&amp;quot;
&amp;quot;Honky-tonk Piano&amp;quot;,&amp;quot;3&amp;quot;
&amp;quot;Electric Piano 1&amp;quot;,&amp;quot;4&amp;quot;
&amp;quot;Electric Piano 2&amp;quot;,&amp;quot;5&amp;quot;
&amp;quot;Harpsichord&amp;quot;,&amp;quot;6&amp;quot;
&amp;quot;Clavi&amp;quot;,&amp;quot;7&amp;quot;
&amp;quot;Celesta&amp;quot;,&amp;quot;8&amp;quot;
&amp;quot;Glockenspiel&amp;quot;,&amp;quot;9&amp;quot;
&amp;quot;Music Box&amp;quot;,&amp;quot;10&amp;quot;
&amp;quot;Vibraphone&amp;quot;,&amp;quot;11&amp;quot;
&amp;quot;Marimba&amp;quot;,&amp;quot;12&amp;quot;
&amp;quot;Xylophone&amp;quot;,&amp;quot;13&amp;quot;
&amp;quot;Tubular Bells&amp;quot;,&amp;quot;14&amp;quot;
&amp;quot;Dulcimer&amp;quot;,&amp;quot;15&amp;quot;
&amp;quot;Drawbar Organ&amp;quot;,&amp;quot;16&amp;quot;
&amp;quot;Percussive Organ&amp;quot;,&amp;quot;17&amp;quot;
&amp;quot;Rock Organ&amp;quot;,&amp;quot;18&amp;quot;
&amp;quot;Church Organ&amp;quot;,&amp;quot;19&amp;quot;
&amp;quot;Reed Organ&amp;quot;,&amp;quot;20&amp;quot;
&amp;quot;Accordion&amp;quot;,&amp;quot;21&amp;quot;
&amp;quot;Harmonica&amp;quot;,&amp;quot;22&amp;quot;
&amp;quot;Tango Accordion&amp;quot;,&amp;quot;23&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this CSV string, the first column contains the name of the instrument, and the second column contains its corresponding value. You can use this string to create a lookup table for the available instruments and their values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Fantastic. I saved this information in a file called “instruments.csv”. Can you write a python function called decode_instrument that takes a string with the name of the instrument and returns its value?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is a python function called &lt;code&gt;decode_instrument&lt;/code&gt; that takes a string with the name of the instrument and returns its value:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def decode_instrument(instrument_name):
    # create a dictionary mapping instrument names to their values
    instrument_values = {
        &amp;quot;Acoustic Grand Piano&amp;quot;: 0,
        &amp;quot;Bright Acoustic Piano&amp;quot;: 1,
        &amp;quot;Electric Grand Piano&amp;quot;: 2,
        &amp;quot;Honky-tonk Piano&amp;quot;: 3,
        &amp;quot;Electric Piano 1&amp;quot;: 4,
        &amp;quot;Electric Piano 2&amp;quot;: 5,
        &amp;quot;Harpsichord&amp;quot;: 6,
        &amp;quot;Clavi&amp;quot;: 7,
        &amp;quot;Celesta&amp;quot;: 8,
        &amp;quot;Glockenspiel&amp;quot;: 9,
        &amp;quot;Music Box&amp;quot;: 10,
        &amp;quot;Vibraphone&amp;quot;: 11,
        &amp;quot;Marimba&amp;quot;: 12,
        &amp;quot;Xylophone&amp;quot;: 13,
        &amp;quot;Tubular Bells&amp;quot;: 14,
        &amp;quot;Dulcimer&amp;quot;: 15,
        &amp;quot;Drawbar Organ&amp;quot;: 16,
        &amp;quot;Percussive Organ&amp;quot;: 17,
        &amp;quot;Rock Organ&amp;quot;: 18,
        &amp;quot;Church Organ&amp;quot;: 19,
        &amp;quot;Reed Organ&amp;quot;: 20,
        &amp;quot;Accordion&amp;quot;: 21,
        &amp;quot;Harmonica&amp;quot;: 22,
        &amp;quot;Tango Accordion&amp;quot;: 23
    }

    # return the value corresponding to the given instrument name
    return instrument_values[instrument_name]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this function, we have created a dictionary that maps instrument names to their values. We then use the given instrument name to look up the corresponding value in this dictionary and return it. You can use this function to quickly lookup the value of a given instrument name. For example, calling &lt;code&gt;decode_instrument(&#34;Acoustic Grand Piano&#34;)&lt;/code&gt; would return the value 0, and calling &lt;code&gt;decode_instrument(&#34;Electric Piano 2&#34;)&lt;/code&gt; would return the value 5.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Well, using code as data wasn’t what I was looking for, but I’ll take it.
Now I had to go back to the code and add this decoder.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Excellent. I saved this function into a file called decode_instrument.py. Can you now modify the program we were working on to import this function and use it to decode the instrument from a string?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is an updated version of the code that imports the &lt;code&gt;decode_instrument&lt;/code&gt; function and uses it to decode the instrument from a string:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# import the decode_instrument function
from decode_instrument import decode_instrument

# create the MIDIFile object with 2 tracks
midi = MIDIFile(2)

# add the track names and tempo
midi.addTrackName(0, 0, &amp;quot;Right Hand&amp;quot;)
midi.addTrackName(1, 0, &amp;quot;Left Hand&amp;quot;)
midi.addTempo(0, 0, 120)

# set the instrument for each track using the decode_instrument function
right_instrument = &amp;quot;Electric Piano 1&amp;quot;
left_instrument = &amp;quot;Electric Piano 2&amp;quot;
midi.addProgramChange(0, 0, 0, decode_instrument(right_instrument))
midi.addProgramChange(1, 0, 0, decode_instrument(left_instrument))

# create a list of notes, durations, and volumes for the right hand part
right_notes = [60, 62, 64, 65, 67, 69, 71]
right_durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]
right_volumes = [100, 80, 60, 50, 40, 30, 20]

# create a list of notes, durations, and volumes for the left hand part
left_notes = [48, 50, 52, 53, 55, 57, 59]
left_durations = [1, 0.5, 0.25, 1, 0.75, 0.5, 2]
left_volumes = [100, 80, 60, 50, 40, 30, 20]

# initialize a variable to keep track of the total time elapsed
total_time&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Oops.
I got intro trouble.
I think that I was once again coming up to the limit of tokens GPT will respond with.
The script is now too long for it to fit into one response.
Fortunately, I could get the rest.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Oops, you didn’t finish the code there. That’s fine, can you write the code beginning from line 27?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is the code starting from line 27:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# initialize a variable to keep track of the total time elapsed
total_time = 0

# use a for loop to add each note to the right hand track
for i, (note, duration, volume) in enumerate(zip(right_notes, right_durations, right_volumes)):
# add the note with the specified duration and volume starting at the current total time
midi.addNote(0, 0, note, total_time, duration, volume)
# increment the total time by the duration of the current note
total_time += duration

# reset the total time to 0 for the left hand track
total_time = 0

# use a for loop to add each note to the left hand track
for i, (note, duration, volume) in enumerate(zip(left_notes, left_durations, left_volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(1, 0, note, total_time, duration, volume)
   # increment the total time by the duration of the current note
   total_time += duration

# write the MIDIFile to a file
with open(&amp;quot;piano_song.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)      &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we import the &lt;code&gt;decode_instrument&lt;/code&gt; function and use it to decode the instrument from a string. We then use the &lt;code&gt;addProgramChange&lt;/code&gt; method to set the instrument for each track using the decoded values. This allows us to specify the instrument for each track using its name&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At this point I should’ve started to refactor the code to make it more concise and split things in different functions.
This would make each part fit into a single response and also better overall.
In the end I decided I was happy with the script as it was except for one detail.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Awesome. Now let’s assume that I have a file called song.py which has the notes, durations and volumes and instrument of each track. Modify the program to load the values from that file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is an updated version of the code that loads the values for the notes, durations, volumes, and instruments from a file called &lt;code&gt;song.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from midiutil.MidiFile import MIDIFile

# import the decode_instrument function
from decode_instrument import decode_instrument

# create the MIDIFile object with 2 tracks
midi = MIDIFile(2)

# add the track names and tempo
midi.addTrackName(0, 0, &amp;quot;Right Hand&amp;quot;)
midi.addTrackName(1, 0, &amp;quot;Left Hand&amp;quot;)
midi.addTempo(0, 0, 120)

# load the notes, durations, volumes, and instruments from the song.py file
from song import right_notes, right_durations, right_volumes, right_instrument
from song import left_notes, left_durations, left_volumes, left_instrument

# set the instrument for each track using the decode_instrument function
midi.addProgramChange(0, 0, 0, decode_instrument(right_instrument))
midi.addProgramChange(1, 0, 0, decode_instrument(left_instrument))

# initialize a variable to keep track of the total time elapsed
total_time = 0

# use a for loop to add each note to the right hand track
for i, (note, duration, volume) in enumerate(zip(right_notes, right_durations, right_volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(0, 0, note, total_time,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Repeat the program starting from line 25.
[Again, hitting the limits]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is the code starting from line 25:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# initialize a variable to keep track of the total time elapsed
total_time = 0

# use a for loop to add each note to the right hand track
for i, (note, duration, volume) in enumerate(zip(right_notes, right_durations, right_volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(0, 0, note, total_time, duration, volume)
   # increment the total time by the duration of the current note
   total_time += duration

# reset the total time to 0 for the left hand track
total_time = 0

# use a for loop to add each note to the left hand track
for i, (note, duration, volume) in enumerate(zip(left_notes, left_durations, left_volumes)):
   # add the note with the specified duration and volume starting at the current total time
   midi.addNote(1, 0, note, total_time, duration, volume)
   # increment the total time by the duration of the current note
   total_time += duration

# write the MIDIFile to a file
with open(&amp;quot;piano_song.mid&amp;quot;, &amp;quot;wb&amp;quot;) as output_file:
   midi.writeFile(output_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we load the values for the notes, durations, volumes, and instruments from the &lt;code&gt;song.py&lt;/code&gt; file using the &lt;code&gt;from&lt;/code&gt; keyword. We then use these values to set the instruments and add the notes to each track. This allows us to specify the notes, durations, volumes, and instruments for the song in a separate file, and use this code to generate the MIDI file.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-a-song-with-gpt&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Writing a song with GPT&lt;/h4&gt;
&lt;p&gt;At this point I was happy enough with the program and annoyed at hitting the limit that I decided to leave it as it was.
Now it was time to write some music.&lt;/p&gt;
&lt;p&gt;The previous experience had convinced me that asking for a specific melody was a lost cause (there’s probably some prompt hack to do it, though) so I decided to go for a (mostly) original composition.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Excellent! Let’s write a song for this program.&lt;/p&gt;
&lt;p&gt;First, the chord progression should be D major, A major, B minor, F# minor, G major, D major, G major, and A major. Can you create a left hand part that plays those notes with whole notes? Remember that each beat is 1 duration, so whole notes should be 4 durations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is a left hand part that plays the chord progression using whole notes (4 durations):&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# create a list of notes, durations, and volumes for the left hand part
left_notes = [62, 57, 59, 54, 55, 62, 55, 57]
left_durations = [4, 4, 4, 4, 4, 4, 4, 4]
left_volumes = [100, 100, 100, 100, 100, 100, 100, 100]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we have created a list of notes that correspond to the chord progression (D major, A major, B minor, F# minor, G major, D major, G major, and A major). We have also specified a duration of 4 for each note, which corresponds to a whole note. Finally, we have set the volume for each note to 100, which is the maximum value. You can use this code as the left hand part of the song.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Good, but can you lower it an octave?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is a left hand part that plays the chord progression using whole notes (4 durations) in a lower octave:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# create a list of notes, durations, and volumes for the left hand part
left_notes = [50, 45, 47, 42, 43, 50, 43, 45]
left_durations = [4, 4, 4, 4, 4, 4, 4, 4]
left_volumes = [100, 100, 100, 100, 100, 100, 100, 100]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we have created a list of notes that correspond to the chord progression in a lower octave (D major, A major, B minor, F# minor, G major, D major, G major, and A major). We have also specified a duration of 4 for each note, which corresponds to a whole note. Finally, we have set the volume for each note to 100, which is the maximum value. You can use this code as the left hand part of the song, which will be played in a lower octave compared to the original version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So far, this is our song.
The right hand part is the same random tune from before; pay attention to the left hand part.
Notice that it did a pretty good job translating my description into midi notes!
Pretty amazing.&lt;/p&gt;
&lt;div class=&#39;audio-container&#39;&gt;

&lt;audio controls&gt;
&lt;source src=&#34;../../../post/gptsong/song1.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
&lt;p&gt;Your browser does not support the audio element.&lt;/p&gt;
&lt;/audio&gt;
&lt;/div&gt;
&lt;p&gt;You might recognise this chord progression &lt;a href=&#34;https://www.youtube.com/watch?v=uxC1fPE1QEE&#34;&gt;from somewhere else&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Perfect. Now lets move to the right hand part.
Each bar has 4 fourths. So in each bar let’s play an arpeggio of the corresponding triad plus the next octave. This is 4 fourths in each bar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is a right hand part that plays an arpeggio of the corresponding triad plus the next octave for each chord in the progression:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# create a list of notes, durations, and volumes for the right hand part
right_notes = [
62, 65, 69, 72,  # D major
57, 60, 64, 67,  # A major
59, 62, 66, 69,  # B minor
54, 57, 61, 64,  # F# minor
55, 58, 62, 65,  # G major
62, 65, 69, 72,  # D major
55, 58, 62, 65,  # G major
57, 60, 64, 67   # A major
]
right_durations = [1, 1, 1, 1] * 8  # each note is 1 beat
right_volumes = [100, 90, 80, 70] * 8  # each note has a different volume&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we have created a list of notes that correspond to the arpeggios of each chord in the progression. We have also specified a duration of 1 for each note, which corresponds to a beat. Finally, we have set the volume for each note to a different value, which allows each note to have a different volume. You can use this code as the right hand part of the song, which will play the arpeggios of each chord in the progression.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now is when the cracks in my music theory formation were starting to show.
I bet that “main triad plus next octave” must have a name, but I don’t know it.
But in any case, GPT translated my ramblings into what I wanted.&lt;/p&gt;
&lt;div class=&#39;audio-container&#39;&gt;

&lt;audio controls&gt;
&lt;source src=&#34;../../../post/gptsong/song2.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
&lt;p&gt;Your browser does not support the audio element.&lt;/p&gt;
&lt;/audio&gt;
&lt;/div&gt;
&lt;p&gt;(I think there’s some dissonance somewhere; I could’ve looked closely at the notes to check it, but I decided that I wasn’t going to mess with GPT’s “vision”.)&lt;/p&gt;
&lt;p&gt;So far I was using GPT to translate a fairly strict description of what I wanted into python code.
But now for the real challenge.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;This sounds pretty good!
This is is good for a first verse. Describe a possible second verse that plays on this theme but adds some variation. Don’t show me the code, just describe it musically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;For the second verse, we can keep the same chord progression and left hand part, but add some variation to the right hand part. One possible variation is to play the arpeggio of each chord in the progression using sixteenth notes instead of fourths. This will make the right hand part sound more energetic and lively. We can also add some notes in between the arpeggios to fill out the harmony and create a more complex melody. For example, we can add some chromatic passing notes or add a note from the chord a beat before the arpeggio starts. This will create a more interesting and varied melody. Overall, the second verse will have the same overall structure and harmony as the first verse, but with some added variation and complexity in the right hand part.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Well, that was interesting, I guess.
Let’s see how it works…&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Sounds good. Since the left hand part repeats I only need you to show me the code for the right hand part (both verses).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here is the code for the right hand part of both verses:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# create a list of notes, durations, and volumes for the right hand part (first verse)
right_notes_1 = [
62, 65, 69, 72,  # D major
57, 60, 64, 67,  # A major
59, 62, 66, 69,  # B minor
54, 57, 61, 64,  # F# minor
55, 58, 62, 65,  # G major
62, 65, 69, 72,  # D major
55, 58, 62, 65,  # G major
57, 60, 64, 67   # A major
]
right_durations_1 = [1, 1, 1, 1] * 8  # each note is 1 beat
right_volumes_1 = [100, 90, 80, 70] * 8  # each note has a different volume

# create a list of notes, durations, and volumes for the right hand part (second verse)
right_notes_2 = [
62, 63, 65, 66, 67, 69, 70, 72,  # D major
57, 58, 60, 61, 62, 64, 65, 67,  # A major
59, 60, 62, 63, 64, 66, 67, 69,  # B minor
54, 55, 57, 58, 59, 61, 62, 64,  # F# minor
55, 56, 58, 59, 60, 62, 63, 65,  # G major
62, 63, 65, 66, 67, 69, 70, 72,  # D major
55, 56, 58, 59, 60, 62, 63, 65,  # G major
57, 58, 60, 61, 62, 64, 65, 67   # A major
]
right_durations_2 = [0.25, 0.25, 0.25, 0.25] * 32  # each note is 1/4 beat
right_volumes_2 = [100, 90, 80, 70] * 32  # each note has a different volume&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we have created two lists of notes for the right hand part, one for each verse. The first verse uses the same arpeggio pattern as the original version, with a duration of 1 beat for each note. The second verse uses the same arpeggio pattern but with sixteenth notes, which have a duration of 1/4 beat. We have also specified different volumes for each note, which allows each note to have a different volume. You can use this code to generate the right hand part for both verses of the song.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Ok, I have the right_notes_1 and right_notes_2. How do I combine them into one variable called right_notes?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;To combine the &lt;code&gt;right_notes_1&lt;/code&gt; and &lt;code&gt;right_notes_2&lt;/code&gt; variables into one variable called &lt;code&gt;right_notes&lt;/code&gt;, you can use the &lt;code&gt;+&lt;/code&gt; operator to concatenate the two lists. Here is an example of how to do this:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;right_notes = right_notes_1 + right_notes_2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we use the &lt;code&gt;+&lt;/code&gt; operator to concatenate the &lt;code&gt;right_notes_1&lt;/code&gt; and &lt;code&gt;right_notes_2&lt;/code&gt; lists, and store the result in a new list called &lt;code&gt;right_notes&lt;/code&gt;. You can then use this &lt;code&gt;right_notes&lt;/code&gt; list as the input for the &lt;code&gt;addNote&lt;/code&gt; method to add the notes to the MIDI file. This will combine the notes from both verses into one list, which can be used to generate the MIDI file for the entire song.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice that GPT split each verse in its own variable, which was great for readability but bad for the code because I’m a dummy who doesn’t know python.
I could’ve googled how to concatenate lists in python, but I for this experiment I wanted to do as much as I could with GPT alone.&lt;/p&gt;
&lt;p&gt;At I’m writing this post I realise that GPT actually made a mistake.
&lt;code&gt;right_notes_2&lt;/code&gt; has 64 elements, which corresponds to 8 bars when played with eighths.
But then &lt;code&gt;right_durations_2&lt;/code&gt; has 128 elements with value 0.25 (sixteenth notes) instead of 64 elements with value of 0.5.
Re-reading GPT’s description, which mentioned using sixteenths, it seems that GPT actually didn’t add enough notes in the arpeggios.
There are two was to fix it: duplicate every row in &lt;code&gt;right_notes_2&lt;/code&gt; or change &lt;code&gt;right_durations_2&lt;/code&gt; to be eighths.
I’ll fix it by using eighths because it sounds much better to my ears. &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anyway, here’s the funky new song by GPT (ft. me).&lt;/p&gt;
&lt;div class=&#39;audio-container&#39;&gt;

&lt;audio controls&gt;
&lt;source src=&#34;../../../post/gptsong/song3.mp3&#34; type=&#34;audio/mpeg&#34;&gt;
&lt;p&gt;Your browser does not support the audio element.&lt;/p&gt;
&lt;/audio&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;coda&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Coda&lt;/h2&gt;
&lt;p&gt;As a final part of the conversation I wanted to probe GPT for next steps forward and also get a title for this post.
Here’s the rest of the conversation.&lt;/p&gt;
&lt;div class=&#34;conversation&#34;&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Great. I will share this song with my friends.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;I’m glad to hear that! I hope your friends enjoy the song. Let me know if you need any further assistance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Yes, I think there’s still things to improve in our program. Can you suggest 5 things to change in our code to make it better in order or more to least important?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here are 5 suggestions to improve the code we have been working on:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Use a class to organize the code and make it more modular and reusable. Instead of using global variables and functions, we can define a Song class that has attributes and methods to represent the data and operations for the song. This will allow us to create multiple songs and manipulate them independently, as well as make the code easier to understand and maintain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handle errors and exceptions gracefully. Currently, the code does not handle any errors or exceptions that may occur during execution. For example, if the song.py file does not exist or if the decode_instrument function fails to decode a valid instrument, the code will crash and produce an error message. To improve the code, we can add try-except blocks to catch and handle common errors and exceptions, and provide useful feedback and instructions to the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use more descriptive and meaningful variable names. Some of the variable names used in the code are not very descriptive or meaningful, which can make it difficult to understand the code. For example, the midi variable is used to represent the MIDI file object, but this does not provide much information about its purpose or contents. To improve the code, we can use more descriptive and meaningful variable names that accurately reflect their purpose and contents. For example, we can use midi_file instead of midi to represent the MIDI file object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use standard Python formatting and style conventions. The code currently uses a mix of different formatting and style conventions, which can make it difficult to read and understand. For example, the indentation is not consistent, some lines are too long, and some variable names are not written in snake_case. To improve the code, we can follow the standard Python formatting and style conventions, such as using 4 spaces for indentation, splitting long lines into multiple lines, and using snake_case for variable names. This will make the code more readable and consistent, and improve its overall quality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add more comments and documentation to the code. The code currently has very few comments and no documentation, which can make it difficult to understand and use. For example, it is not clear what the decode_instrument function does, or how to use the addNote method to add a note to the MIDI file. To improve the code, we can add more comments and documentation to explain the purpose and usage of each component of the code. This will make it easier for other people to understand and use the code, and improve its overall maintainability and reliability.`&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Good suggestions. We might work on these in our next session, but now it’s getting late.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, we can work on these improvements in our next session. In the meantime, I hope you have a good rest and I look forward to our next session. Let me know if you have any further questions or need any assistance. Have a great day!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Thanks. Just to finish, can you summarise what we did in this session?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;In this session, we created a Python program that generates a MIDI file with a simple tune using a for loop to add each note. The program allows each note to have a different duration and volume, and it uses a function to decode the instrument from a string. We also discussed some suggestions to improve the code and make it more modular, error-resistant, readable, and documented. Finally, we discussed a possible second verse for the song, and provided the code for the right hand part of both verses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;I want to write a blog post publishing this conversation and adding my comments. Can you suggests 5 possible titles? I want something somewhat funny, puns are particularly appreciated but not necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here are 5 possible titles for the blog post that incorporate some humour or puns:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;“AI-generated tunes: the MIDI-nightmare that’s taking over the music world”&lt;/li&gt;
&lt;li&gt;“Pythoning a MIDI masterpiece: how AI is changing the way we create music”&lt;/li&gt;
&lt;li&gt;“MIDI madness: the AI-powered tunes that will make you laugh, cry, and dance”&lt;/li&gt;
&lt;li&gt;“AI, MIDI, and you: the future of music is here, and it’s hilarious”&lt;/li&gt;
&lt;li&gt;“Python and MIDI: the perfect duo for creating the craziest tunes you’ve ever heard”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These titles are meant to be humorous and playful, and incorporate some puns related to the topic of the blog post. You can choose the one that you like the most or modify them to better fit your needs and preferences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Those are great. Can you suggest 5 more with ChatGPT in the title.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here are 5 more possible titles for the blog post that incorporate the term “ChatGPT”:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;“ChatGPT: the AI chatbot that helps you write MIDI tunes”&lt;/li&gt;
&lt;li&gt;“Creating music with ChatGPT: a step-by-step guide to MIDI madness”&lt;/li&gt;
&lt;li&gt;“ChatGPT and MIDI: the perfect combination for making the craziest tunes”&lt;/li&gt;
&lt;li&gt;“ChatGPT’s MIDI masterpieces: how AI is changing the way we create music”&lt;/li&gt;
&lt;li&gt;“ChatGPT’s MIDI magic: the AI chatbot that will make you dance and sing”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These titles all incorporate the term “ChatGPT” and highlight its role in creating MIDI tunes. You can choose the one that you like the most or modify them to better fit your needs and preferences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;question&#34;&gt;
&lt;p&gt;Can you create 10 titles combining these 5 with the previous 5?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;answer&#34;&gt;
&lt;p&gt;Sure, here are 10 possible titles that combine the previous 5 titles with the 5 new titles:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;“AI-generated tunes with ChatGPT: the MIDI-nightmare that’s taking over the music world”&lt;/li&gt;
&lt;li&gt;“Pythoning a MIDI masterpiece with ChatGPT: how AI is changing the way we create music”&lt;/li&gt;
&lt;li&gt;“MIDI madness with ChatGPT: the AI-powered tunes that will make you laugh, cry, and dance”&lt;/li&gt;
&lt;li&gt;“AI, MIDI, and ChatGPT: the future of music is here, and it’s hilarious”&lt;/li&gt;
&lt;li&gt;“Python, MIDI, and ChatGPT: the perfect trio for creating the craziest tunes you’ve ever heard”&lt;/li&gt;
&lt;li&gt;“ChatGPT: the AI chatbot that helps you write MIDI tunes like a pro”&lt;/li&gt;
&lt;li&gt;“Creating music with ChatGPT and MIDI: a step-by-step guide to MIDI madness”&lt;/li&gt;
&lt;li&gt;“ChatGPT and MIDI: the perfect combination for making the wildest, wackiest tunes”&lt;/li&gt;
&lt;li&gt;“ChatGPT’s MIDI masterpieces: how AI is revolutionizing the way we create music”&lt;/li&gt;
&lt;li&gt;“ChatGPT’s MIDI magic: the AI chatbot that will make your feet move and your heart sing”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These titles incorporate the previous 5 titles and the new 5 titles, and highlight the role of ChatGPT in creating MIDI tunes. You can choose the one that you like the most or modify them to better fit your needs and preferences.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;

.audio-container {
   margin: 2rem 0 0 0;
   display: flex;
   justify-content: center;
   align-items: center;
}

.conversation {
   margin: 1rem 3rem 0 3rem;
}
.question {
   background-color: #F7F7F8;
   padding: 0.5rem 2rem 0.5rem 2rem;   
   font-weight: bold;
   border-bottom: 1px solid rgba(0,0,0,.1);

}

.answer {
   background-color: #F7F7F8;
   padding: 0.5rem 2rem 0.5rem 4rem;
   border-bottom: 1px solid rgba(0,0,0,.1);
}


&lt;/style&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes footnotes-end-of-document&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;I think that the reason it’s become so popular has less to do with the technical details and more with the fact that is free to use with no token restrictions.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Writing about music in English is ugly as hell. In Spanish notes and durations have cool, interesting names like “&lt;em&gt;corcheas&lt;/em&gt;” instead of “eighths” and Do, Re, Mi, Fa, Sol, La, Si instead of C, D, E, F, G, A, B. I guess the English nomenclature is more clear and doesn’t require you to memorise names, but still, ugly and boring.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>